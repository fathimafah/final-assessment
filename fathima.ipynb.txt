{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 505
        },
        "id": "HZtLjWduNuP0",
        "outputId": "d59e7404-f2fa-4bb0-98ef-b5d3042aecbc"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Loan_ID  Gender Married Dependents     Education Self_Employed  \\\n",
              "0    LP001002    Male      No          0      Graduate            No   \n",
              "1    LP001003    Male     Yes          1      Graduate            No   \n",
              "2    LP001005    Male     Yes          0      Graduate           Yes   \n",
              "3    LP001006    Male     Yes          0  Not Graduate            No   \n",
              "4    LP001008    Male      No          0      Graduate            No   \n",
              "..        ...     ...     ...        ...           ...           ...   \n",
              "609  LP002978  Female      No          0      Graduate            No   \n",
              "610  LP002979    Male     Yes         3+      Graduate            No   \n",
              "611  LP002983    Male     Yes          1      Graduate            No   \n",
              "612  LP002984    Male     Yes          2      Graduate            No   \n",
              "613  LP002990  Female      No          0      Graduate           Yes   \n",
              "\n",
              "     ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\n",
              "0               5849                0.0         NaN             360.0   \n",
              "1               4583             1508.0       128.0             360.0   \n",
              "2               3000                0.0        66.0             360.0   \n",
              "3               2583             2358.0       120.0             360.0   \n",
              "4               6000                0.0       141.0             360.0   \n",
              "..               ...                ...         ...               ...   \n",
              "609             2900                0.0        71.0             360.0   \n",
              "610             4106                0.0        40.0             180.0   \n",
              "611             8072              240.0       253.0             360.0   \n",
              "612             7583                0.0       187.0             360.0   \n",
              "613             4583                0.0       133.0             360.0   \n",
              "\n",
              "     Credit_History Property_Area Loan_Status  \n",
              "0               1.0         Urban           Y  \n",
              "1               1.0         Rural           N  \n",
              "2               1.0         Urban           Y  \n",
              "3               1.0         Urban           Y  \n",
              "4               1.0         Urban           Y  \n",
              "..              ...           ...         ...  \n",
              "609             1.0         Rural           Y  \n",
              "610             1.0         Rural           Y  \n",
              "611             1.0         Urban           Y  \n",
              "612             1.0         Urban           Y  \n",
              "613             0.0     Semiurban           N  \n",
              "\n",
              "[614 rows x 13 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6b77372f-0ff2-4241-897c-927881e53dbd\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Loan_ID</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Married</th>\n",
              "      <th>Dependents</th>\n",
              "      <th>Education</th>\n",
              "      <th>Self_Employed</th>\n",
              "      <th>ApplicantIncome</th>\n",
              "      <th>CoapplicantIncome</th>\n",
              "      <th>LoanAmount</th>\n",
              "      <th>Loan_Amount_Term</th>\n",
              "      <th>Credit_History</th>\n",
              "      <th>Property_Area</th>\n",
              "      <th>Loan_Status</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>LP001002</td>\n",
              "      <td>Male</td>\n",
              "      <td>No</td>\n",
              "      <td>0</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>5849</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Urban</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>LP001003</td>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>1</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>4583</td>\n",
              "      <td>1508.0</td>\n",
              "      <td>128.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Rural</td>\n",
              "      <td>N</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>LP001005</td>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>0</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>Yes</td>\n",
              "      <td>3000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>66.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Urban</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>LP001006</td>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>0</td>\n",
              "      <td>Not Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>2583</td>\n",
              "      <td>2358.0</td>\n",
              "      <td>120.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Urban</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>LP001008</td>\n",
              "      <td>Male</td>\n",
              "      <td>No</td>\n",
              "      <td>0</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>6000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>141.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Urban</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>609</th>\n",
              "      <td>LP002978</td>\n",
              "      <td>Female</td>\n",
              "      <td>No</td>\n",
              "      <td>0</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>2900</td>\n",
              "      <td>0.0</td>\n",
              "      <td>71.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Rural</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>610</th>\n",
              "      <td>LP002979</td>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>3+</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>4106</td>\n",
              "      <td>0.0</td>\n",
              "      <td>40.0</td>\n",
              "      <td>180.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Rural</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>611</th>\n",
              "      <td>LP002983</td>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>1</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>8072</td>\n",
              "      <td>240.0</td>\n",
              "      <td>253.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Urban</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>612</th>\n",
              "      <td>LP002984</td>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>2</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>7583</td>\n",
              "      <td>0.0</td>\n",
              "      <td>187.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Urban</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>613</th>\n",
              "      <td>LP002990</td>\n",
              "      <td>Female</td>\n",
              "      <td>No</td>\n",
              "      <td>0</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>Yes</td>\n",
              "      <td>4583</td>\n",
              "      <td>0.0</td>\n",
              "      <td>133.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>Semiurban</td>\n",
              "      <td>N</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>614 rows × 13 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6b77372f-0ff2-4241-897c-927881e53dbd')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-6b77372f-0ff2-4241-897c-927881e53dbd button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-6b77372f-0ff2-4241-897c-927881e53dbd');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ],
      "source": [
        "importimportimportrimportimportimportrimportimport numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "data=pd.read_csv(\"/content/train_ctrUa4K.csv\")\n",
        "data"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.isna().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nqme_2nWOKok",
        "outputId": "9814896c-f145-41fc-8598-c28b0ea2a81f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Loan_ID               0\n",
              "Gender               13\n",
              "Married               3\n",
              "Dependents           15\n",
              "Education             0\n",
              "Self_Employed        32\n",
              "ApplicantIncome       0\n",
              "CoapplicantIncome     0\n",
              "LoanAmount           22\n",
              "Loan_Amount_Term     14\n",
              "Credit_History       50\n",
              "Property_Area         0\n",
              "Loan_Status           0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jvVdlXslOO3J",
        "outputId": "e0513462-ee3d-49c2-f9e6-edfba8d88f7a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['Loan_ID', 'Gender', 'Married', 'Dependents', 'Education',\n",
              "       'Self_Employed', 'ApplicantIncome', 'CoapplicantIncome', 'LoanAmount',\n",
              "       'Loan_Amount_Term', 'Credit_History', 'Property_Area', 'Loan_Status'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bYQnAXWPOvcC",
        "outputId": "f282ce2d-95ca-430e-a1f7-9f8aafa752ac"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(614, 13)"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "C"
      ],
      "metadata": {
        "id": "VR-HQKdfO0ms"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "num_col.isna().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CYxc1Om2Q6ha",
        "outputId": "d6bb32d2-fa34-4295-b0d3-8b1792dc89b7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LoanAmount          22\n",
              "Loan_Amount_Term    14\n",
              "Credit_History      50\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.impute import SimpleImputer\n",
        "imputer=SimpleImputer(missing_values=np.nan,strategy=\"mean\")\n",
        "imputer=imputer.fit(num_col)\n",
        "num_col=imputer.transform(num_col)\n",
        "num_col"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 237
        },
        "id": "O4SqCA_WQWrB",
        "outputId": "c34e7f31-e972-47ae-af5a-7a44cccb204d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-1-39f36ce993f1>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimpute\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mSimpleImputer\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mimputer\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mSimpleImputer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmissing_values\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnan\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mstrategy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"mean\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mimputer\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mimputer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnum_col\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mnum_col\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mimputer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnum_col\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mnum_col\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'np' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "num_col=pd.DataFrame(num_col,columns=[['LoanAmount','Loan_Amount_Term','Credit_History']])"
      ],
      "metadata": {
        "id": "eYlRiDbvQblc",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 167
        },
        "outputId": "a12154a8-b989-4647-d93d-8ef195cdbb04"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-2-260a1e245a8f>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mnum_col\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnum_col\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'LoanAmount'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'Loan_Amount_Term'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'Credit_History'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'pd' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "num_col"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 167
        },
        "id": "i1u0kYZoQFHo",
        "outputId": "17f38758-454c-46a1-9db4-a196b2f73a27"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-3-6c7b70be8222>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mnum_col\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'num_col' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "type(num_col)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0dDLqD-QRYHz",
        "outputId": "2d4ef02c-4bea-4f96-fd03-af4b68e7fbcb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "pandas.core.frame.DataFrame"
            ]
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "num_col.isna().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Slg3mwNsRbkZ",
        "outputId": "98d56be2-1c37-429b-b1d7-c33f223c8e04"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LoanAmount          0\n",
              "Loan_Amount_Term    0\n",
              "Credit_History      0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.drop(['LoanAmount','Loan_Amount_Term','Credit_History'],axis=1,inplace=True)\n",
        "data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 485
        },
        "id": "_v0H8mC8Ro2O",
        "outputId": "396158e1-6f4f-4d15-9060-32d4e8569346"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Loan_ID  Gender Married Dependents     Education Self_Employed  \\\n",
              "0    LP001002    Male      No          0      Graduate            No   \n",
              "1    LP001003    Male     Yes          1      Graduate            No   \n",
              "2    LP001005    Male     Yes          0      Graduate           Yes   \n",
              "3    LP001006    Male     Yes          0  Not Graduate            No   \n",
              "4    LP001008    Male      No          0      Graduate            No   \n",
              "..        ...     ...     ...        ...           ...           ...   \n",
              "609  LP002978  Female      No          0      Graduate            No   \n",
              "610  LP002979    Male     Yes         3+      Graduate            No   \n",
              "611  LP002983    Male     Yes          1      Graduate            No   \n",
              "612  LP002984    Male     Yes          2      Graduate            No   \n",
              "613  LP002990  Female      No          0      Graduate           Yes   \n",
              "\n",
              "     ApplicantIncome  CoapplicantIncome Property_Area Loan_Status  \n",
              "0               5849                0.0         Urban           Y  \n",
              "1               4583             1508.0         Rural           N  \n",
              "2               3000                0.0         Urban           Y  \n",
              "3               2583             2358.0         Urban           Y  \n",
              "4               6000                0.0         Urban           Y  \n",
              "..               ...                ...           ...         ...  \n",
              "609             2900                0.0         Rural           Y  \n",
              "610             4106                0.0         Rural           Y  \n",
              "611             8072              240.0         Urban           Y  \n",
              "612             7583                0.0         Urban           Y  \n",
              "613             4583                0.0     Semiurban           N  \n",
              "\n",
              "[614 rows x 10 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f809e6e3-4a9c-4a83-b0c9-82e9670aba41\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Loan_ID</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Married</th>\n",
              "      <th>Dependents</th>\n",
              "      <th>Education</th>\n",
              "      <th>Self_Employed</th>\n",
              "      <th>ApplicantIncome</th>\n",
              "      <th>CoapplicantIncome</th>\n",
              "      <th>Property_Area</th>\n",
              "      <th>Loan_Status</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>LP001002</td>\n",
              "      <td>Male</td>\n",
              "      <td>No</td>\n",
              "      <td>0</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>5849</td>\n",
              "      <td>0.0</td>\n",
              "      <td>Urban</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>LP001003</td>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>1</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>4583</td>\n",
              "      <td>1508.0</td>\n",
              "      <td>Rural</td>\n",
              "      <td>N</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>LP001005</td>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>0</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>Yes</td>\n",
              "      <td>3000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>Urban</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>LP001006</td>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>0</td>\n",
              "      <td>Not Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>2583</td>\n",
              "      <td>2358.0</td>\n",
              "      <td>Urban</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>LP001008</td>\n",
              "      <td>Male</td>\n",
              "      <td>No</td>\n",
              "      <td>0</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>6000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>Urban</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>609</th>\n",
              "      <td>LP002978</td>\n",
              "      <td>Female</td>\n",
              "      <td>No</td>\n",
              "      <td>0</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>2900</td>\n",
              "      <td>0.0</td>\n",
              "      <td>Rural</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>610</th>\n",
              "      <td>LP002979</td>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>3+</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>4106</td>\n",
              "      <td>0.0</td>\n",
              "      <td>Rural</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>611</th>\n",
              "      <td>LP002983</td>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>1</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>8072</td>\n",
              "      <td>240.0</td>\n",
              "      <td>Urban</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>612</th>\n",
              "      <td>LP002984</td>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>2</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>7583</td>\n",
              "      <td>0.0</td>\n",
              "      <td>Urban</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>613</th>\n",
              "      <td>LP002990</td>\n",
              "      <td>Female</td>\n",
              "      <td>No</td>\n",
              "      <td>0</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>Yes</td>\n",
              "      <td>4583</td>\n",
              "      <td>0.0</td>\n",
              "      <td>Semiurban</td>\n",
              "      <td>N</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>614 rows × 10 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f809e6e3-4a9c-4a83-b0c9-82e9670aba41')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-f809e6e3-4a9c-4a83-b0c9-82e9670aba41 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-f809e6e3-4a9c-4a83-b0c9-82e9670aba41');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data=pd.concat([data,num_col],axis=1)\n",
        "data\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 185
        },
        "id": "AJy6y4NNR3Xe",
        "outputId": "1a8031c7-36e2-4e29-f53e-c4e77c7046fd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-4-5aa7082bf791>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconcat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mnum_col\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'pd' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.isna().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7Ra1LWkqSQDE",
        "outputId": "8be276d8-796d-4fb3-8bcd-af74b760bdd2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Loan_ID                 0\n",
              "Gender                 13\n",
              "Married                 3\n",
              "Dependents             15\n",
              "Education               0\n",
              "Self_Employed          32\n",
              "ApplicantIncome         0\n",
              "CoapplicantIncome       0\n",
              "Property_Area           0\n",
              "Loan_Status             0\n",
              "(LoanAmount,)           0\n",
              "(Loan_Amount_Term,)     0\n",
              "(Credit_History,)       0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.drop(['Gender','Married', 'Dependents', 'Education','Self_Employed', ],axis=1,inplace=True)"
      ],
      "metadata": {
        "id": "zOpGKOAYTKzI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data.isna().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "230gaKnOT_tg",
        "outputId": "80e9503d-2195-4baf-b8db-773fecbbd2a1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Loan_ID                0\n",
              "ApplicantIncome        0\n",
              "CoapplicantIncome      0\n",
              "Property_Area          0\n",
              "Loan_Status            0\n",
              "(LoanAmount,)          0\n",
              "(Loan_Amount_Term,)    0\n",
              "(Credit_History,)      0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 43
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "freq_graph=data.select_dtypes(include=[\"float\"])\n",
        "freq_graph.hist(figsize=(20,15))\n",
        "plt.show"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 882
        },
        "id": "C53FvNFAUD2t",
        "outputId": "03961c4c-e5f5-4483-d995-294886dfadb2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<function matplotlib.pyplot.show(close=None, block=None)>"
            ]
          },
          "metadata": {},
          "execution_count": 44
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2000x1500 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data=pd.read_csv(\"/content/train_ctrUa4K.csv\")\n",
        "data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 505
        },
        "id": "9Yfdyer9UiWp",
        "outputId": "9676cac4-dc84-49f3-e338-fa0d9b5aa454"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Loan_ID  Gender Married Dependents     Education Self_Employed  \\\n",
              "0    LP001002    Male      No          0      Graduate            No   \n",
              "1    LP001003    Male     Yes          1      Graduate            No   \n",
              "2    LP001005    Male     Yes          0      Graduate           Yes   \n",
              "3    LP001006    Male     Yes          0  Not Graduate            No   \n",
              "4    LP001008    Male      No          0      Graduate            No   \n",
              "..        ...     ...     ...        ...           ...           ...   \n",
              "609  LP002978  Female      No          0      Graduate            No   \n",
              "610  LP002979    Male     Yes         3+      Graduate            No   \n",
              "611  LP002983    Male     Yes          1      Graduate            No   \n",
              "612  LP002984    Male     Yes          2      Graduate            No   \n",
              "613  LP002990  Female      No          0      Graduate           Yes   \n",
              "\n",
              "     ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\n",
              "0               5849                0.0         NaN             360.0   \n",
              "1               4583             1508.0       128.0             360.0   \n",
              "2               3000                0.0        66.0             360.0   \n",
              "3               2583             2358.0       120.0             360.0   \n",
              "4               6000                0.0       141.0             360.0   \n",
              "..               ...                ...         ...               ...   \n",
              "609             2900                0.0        71.0             360.0   \n",
              "610             4106                0.0        40.0             180.0   \n",
              "611             8072              240.0       253.0             360.0   \n",
              "612             7583                0.0       187.0             360.0   \n",
              "613             4583                0.0       133.0             360.0   \n",
              "\n",
              "     Credit_History Property_Area Loan_Status  \n",
              "0               1.0         Urban           Y  \n",
              "1               1.0         Rural           N  \n",
              "2               1.0         Urban           Y  \n",
              "3               1.0         Urban           Y  \n",
              "4               1.0         Urban           Y  \n",
              "..              ...           ...         ...  \n",
              "609             1.0         Rural           Y  \n",
              "610             1.0         Rural           Y  \n",
              "611             1.0         Urban           Y  \n",
              "612             1.0         Urban           Y  \n",
              "613             0.0     Semiurban           N  \n",
              "\n",
              "[614 rows x 13 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-924a71f4-4bf3-47b1-8b55-fa3d2eb4b043\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Loan_ID</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Married</th>\n",
              "      <th>Dependents</th>\n",
              "      <th>Education</th>\n",
              "      <th>Self_Employed</th>\n",
              "      <th>ApplicantIncome</th>\n",
              "      <th>CoapplicantIncome</th>\n",
              "      <th>LoanAmount</th>\n",
              "      <th>Loan_Amount_Term</th>\n",
              "      <th>Credit_History</th>\n",
              "      <th>Property_Area</th>\n",
              "      <th>Loan_Status</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>LP001002</td>\n",
              "      <td>Male</td>\n",
              "      <td>No</td>\n",
              "      <td>0</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>5849</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Urban</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>LP001003</td>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>1</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>4583</td>\n",
              "      <td>1508.0</td>\n",
              "      <td>128.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Rural</td>\n",
              "      <td>N</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>LP001005</td>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>0</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>Yes</td>\n",
              "      <td>3000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>66.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Urban</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>LP001006</td>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>0</td>\n",
              "      <td>Not Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>2583</td>\n",
              "      <td>2358.0</td>\n",
              "      <td>120.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Urban</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>LP001008</td>\n",
              "      <td>Male</td>\n",
              "      <td>No</td>\n",
              "      <td>0</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>6000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>141.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Urban</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>609</th>\n",
              "      <td>LP002978</td>\n",
              "      <td>Female</td>\n",
              "      <td>No</td>\n",
              "      <td>0</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>2900</td>\n",
              "      <td>0.0</td>\n",
              "      <td>71.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Rural</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>610</th>\n",
              "      <td>LP002979</td>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>3+</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>4106</td>\n",
              "      <td>0.0</td>\n",
              "      <td>40.0</td>\n",
              "      <td>180.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Rural</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>611</th>\n",
              "      <td>LP002983</td>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>1</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>8072</td>\n",
              "      <td>240.0</td>\n",
              "      <td>253.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Urban</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>612</th>\n",
              "      <td>LP002984</td>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>2</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>7583</td>\n",
              "      <td>0.0</td>\n",
              "      <td>187.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Urban</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>613</th>\n",
              "      <td>LP002990</td>\n",
              "      <td>Female</td>\n",
              "      <td>No</td>\n",
              "      <td>0</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>Yes</td>\n",
              "      <td>4583</td>\n",
              "      <td>0.0</td>\n",
              "      <td>133.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>Semiurban</td>\n",
              "      <td>N</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>614 rows × 13 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-924a71f4-4bf3-47b1-8b55-fa3d2eb4b043')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-924a71f4-4bf3-47b1-8b55-fa3d2eb4b043 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-924a71f4-4bf3-47b1-8b55-fa3d2eb4b043');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 167
        },
        "id": "LEOvbZgJUrzM",
        "outputId": "a2c4fcef-4f96-4a47-938f-1f2633415861"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-5-c3d483a1c074>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'data' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for item in ['LoanAmount','Loan_Amount_Term', 'Credit_History']:\n",
        "  data[item]=data[item].fillna(data[item].median())\n",
        "data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 202
        },
        "id": "A9C8OmTbUuMi",
        "outputId": "7cd81dfe-381d-4b56-ab8a-b5b22d09111d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-6-541f8720101f>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mitem\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m'LoanAmount'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'Loan_Amount_Term'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Credit_History'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m   \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfillna\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmedian\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'data' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for item in ['LoanAmount','Loan_Amount_Term', 'Credit_History']:\n",
        "  plt.figure()\n",
        "  plt.boxplot(data[item])\n",
        "  plt.title(item)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "_w8UDWHWVIgy",
        "outputId": "fbc8d5f6-f073-4201-dbed-bd81f54a59e0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAigAAAGzCAYAAAAFROyYAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAA6CUlEQVR4nO3dfVxUdf7//ycMQggO5AVX6wUUFpqYqZ9VKHalTENqY5HdLa3MtDbD9pOatbZ9rXV3pY8X2aUXuZXtR/1UGtFGapmZsklWuO2qqaEracGg6cKgciEz5/dHP05OUhtKngPzuN9u5xac92tmXmO3m/P0Pe/zPgGGYRgCAACwkUCrGwAAAPgmAgoAALAdAgoAALAdAgoAALAdAgoAALAdAgoAALAdAgoAALAdAgoAALAdAgoAALAdAgoAALAdAgrQTixbtkwBAQH66KOPrG7lO/3yl79UQECA7r//fqtb+UHMnj1bBQUFVrcBtHkEFADnjNvt1uuvv674+Hj93//9n9rjrcAIKEDrIKAAOGdeeeUVeTwePffcczp48KA2b95sdUsAbIqAAviRv//978rIyJDT6VR4eLiuuuoqvf/++z41R48e1b333qvk5GSFh4fL6XQqIyND//jHP3zq3n33XQUEBOjll1/Wn/70J3Xv3l3nnXeerrrqKu3du7fZ11+xYoWuvvpqpaenq0+fPlqxYsVpNU1fVf3tb3/Tb37zG3Xr1k2RkZH69a9/rYaGBlVVVemWW27R+eefr/PPP1/33XffaTMxx48f17Rp09SjRw+FhITo4osv1rx583zqysrKFBAQoGXLlp3WQ0BAgB5++GHz94cfflgBAQHau3evbr31VkVGRioiIkLjx4/XiRMnfB53/PhxvfDCCwoICFBAQIBuvfXWb/vfAeA7BFndAIBzY+fOnUpLS5PT6dR9992nDh06aMmSJRo2bJg2bdqkIUOGSJL+9a9/qaCgQL/4xS+UkJCgyspKLVmyRD/96U/1ySefKC4uzud5H3nkEQUGBuree+9VdXW15syZo7Fjx2rr1q0+deXl5dq4caNeeOEFSdKNN96oBQsW6KmnnlJwcPBp/d59992KiYnR73//e73//vt65plnFBkZqS1btqhnz56aPXu21qxZo7lz56pfv3665ZZbJEmGYehnP/uZNm7cqAkTJmjAgAF68803NX36dH3xxRdasGDBGf8Z/vKXv1RCQoLy8vK0bds2/fnPf1ZUVJT+53/+R5L0v//7v5o4caJ+/OMf64477pAkXXjhhWf8eoBfMwC0C88//7whyfjwww+bHc/KyjKCg4ONffv2mefKy8uNTp06GT/5yU/Mc3V1dYbH4/F57P79+42QkBBj1qxZ5rmNGzcakow+ffoY9fX15vnHH3/ckGRs377d5znmzZtnhIaGGm632zAMw/j0008NScarr77a7PsYOXKk4fV6zfMpKSlGQECAceedd5rnGhsbje7duxs//elPzXMFBQWGJOOPf/yjz/Pm5OQYAQEBxt69e833JMl4/vnnT/uzkmQ89NBD5u8PPfSQIcm47bbbfOp+/vOfG126dPE5FxYWZowbN+605wTQMnzFA/gBj8ejt956S1lZWbrgggvM87GxsRozZoz+9re/ye12S5JCQkIUGBhoPu7IkSMKDw/XxRdfrG3btp323OPHj/eZAUlLS5P01UzMqVasWKHMzEx16tRJktS7d28NGjSo2a95JGnChAkKCAgwfx8yZIgMw9CECRPMcw6HQ4MHD/Z5rTVr1sjhcOg3v/mNz/NNmzZNhmFo7dq13/En9d3uvPNOn9/T0tJ05MgR888OQOshoAB+4PDhwzpx4oQuvvji08b69Okjr9ergwcPSpK8Xq8WLFig3r17KyQkRF27dlW3bt30z3/+U9XV1ac9vmfPnj6/n3/++ZKkf//73+a5Xbt26e9//7suv/xy7d271zyGDRumwsLCZj/gv/m8ERERkqQePXqcdv7U1/rss88UFxdnBqFT32fT+Jn6Pu8VQOsgoADwMXv2bE2dOlU/+clPtHz5cr355ptav369LrnkEnm93tPqHQ5Hs89jnLIgdfny5ZKkKVOmqHfv3uYxf/581dXV6ZVXXvnez9vceeMMLlc+dXbmVB6P51sf833eK4DWwSJZwA9069ZNHTt21J49e04b2717twIDA82ZidWrVys9PV3PPvusT11VVZW6du3a4tc2DEMrV65Uenq67rrrrtPG//CHP2jFihUaP358i5+7Ob169dLbb7+tmpoan1mU3bt3m+PS17MfVVVVPo8/mxkW6duDD4CWYQYF8AMOh0MjRozQa6+9prKyMvN8ZWWlVq5cqSuuuEJOp9Os/eaMwKpVq/TFF1+c0Wu/9957Kisr0/jx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AgAAbOeM7mYMoP0oLS1VTU2N1W2Ydu3a5fNfu+jUqZN69+5tdRuA3yCgAH6stLRUF110kdVtNOumm26yuoXTfPrpp4QU4BwhoAB+rGnmZPny5erTp4/F3XyltrZWZWVlio+PV2hoqNXtSPpqNuemm26y1UwT0N4RUACoT58+trox3+WXX251CwAsxiJZAABgOwQUAABgOwQUAABgOwQUAABgOwQUAABgOwQUAABgOwQUAABgOwQUAABgOwQUAABgOwQUAABgOwQUAABgOwQUAABgOwQUAABgOwQUAABgO0FWNwDAOgGNdbosJlChVZ9K5fx75duEVn2qy2ICFdBYZ3UrgN8goAB+7LxjB7Tt1+HS5l9Lm63uxr76SNr263DtOnZAUqrV7QB+gYAC+LG68J4auOSYVqxYoT5JSVa3Y1u7du/W2LFj9eyonla3AvgNAgrgx4yg8/R3l1e1kRdJcQOsbse2al1e/d3llRF0ntWtAH6DL50BAIDtEFAAAIDtEFAAAIDtEFAAAIDtEFAAAIDtEFAAAIDttDigbN68Wdddd53i4uIUEBCggoICn3HDMDRz5kzFxsYqNDRUw4cPV2lpqU/N0aNHNXbsWDmdTkVGRmrChAk6duzYWb0RAADQfrQ4oBw/flyXXnqpnn766WbH58yZoyeeeEKLFy/W1q1bFRYWppEjR6qu7ustoseOHaudO3dq/fr1Kiws1ObNm3XHHXec+bsAAADtSos3asvIyFBGRkazY4Zh6LHHHtODDz6o66+/XpL0l7/8RdHR0SooKNANN9ygXbt2ad26dfrwww81ePBgSdKTTz6pUaNGad68eYqLizuLtwMAANqDVt1Jdv/+/XK5XBo+fLh5LiIiQkOGDFFxcbFuuOEGFRcXKzIy0gwnkjR8+HAFBgZq69at+vnPf37a89bX16u+vt783e12t2bbgN86ceKEJGnbtm0Wd/K12tpalZWVKT4+XqGhoVa3I0natWuX1S0AfqdVA4rL5ZIkRUdH+5yPjo42x1wul6KionybCApS586dzZpvysvL0+9///vWbBWApN27d0uSbr/9dos7aRs6depkdQuA32gT9+KZMWOGpk6dav7udrvVo0cPCzsC2oesrCxJUlJSkjp27GhtM/+/Xbt26aabbtLy5cvVp08fq9sxderUSb1797a6DcBvtGpAiYmJkSRV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\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Q1=np.percentile(data['LoanAmount'],25,interpolation='midpoint')\n",
        "Q2=np.percentile(data['LoanAmount'],50,interpolation='midpoint')\n",
        "Q3=np.percentile(data['LoanAmount'],75,interpolation='midpoint')\n",
        "print(Q1)\n",
        "print(Q2)\n",
        "print(Q3)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6MHSseuaVlTy",
        "outputId": "209c46af-cbb3-4c2f-c4ca-a155ef06b9ca"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "100.5\n",
            "128.0\n",
            "164.5\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-49-e2b81ca1e86c>:1: DeprecationWarning: the `interpolation=` argument to percentile was renamed to `method=`, which has additional options.\n",
            "Users of the modes 'nearest', 'lower', 'higher', or 'midpoint' are encouraged to review the method they. (Deprecated NumPy 1.22)\n",
            "  Q1=np.percentile(data['LoanAmount'],25,interpolation='midpoint')\n",
            "<ipython-input-49-e2b81ca1e86c>:2: DeprecationWarning: the `interpolation=` argument to percentile was renamed to `method=`, which has additional options.\n",
            "Users of the modes 'nearest', 'lower', 'higher', or 'midpoint' are encouraged to review the method they. (Deprecated NumPy 1.22)\n",
            "  Q2=np.percentile(data['LoanAmount'],50,interpolation='midpoint')\n",
            "<ipython-input-49-e2b81ca1e86c>:3: DeprecationWarning: the `interpolation=` argument to percentile was renamed to `method=`, which has additional options.\n",
            "Users of the modes 'nearest', 'lower', 'higher', or 'midpoint' are encouraged to review the method they. (Deprecated NumPy 1.22)\n",
            "  Q3=np.percentile(data['LoanAmount'],75,interpolation='midpoint')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "IQR=Q3-Q1\n",
        "IQR"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "j_Cb7FuiWKej",
        "outputId": "eb6b3da2-8be1-440d-daac-bf49af3f9efe"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "64.0"
            ]
          },
          "metadata": {},
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "low_wisk=Q1-1.5*IQR\n",
        "upp_wisk=Q3+1.5*IQR\n",
        "low_wisk"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "S_AoRJK4WR_C",
        "outputId": "6c3f908d-2bf8-4d30-e379-c83ab7eb0fc0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "4.5"
            ]
          },
          "metadata": {},
          "execution_count": 51
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "upp_wisk"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XGPKlKlMWUEi",
        "outputId": "d8977917-18ed-4127-f032-7f8d0c70efdf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "260.5"
            ]
          },
          "metadata": {},
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "outlier=[]\n",
        "for x in data['LoanAmount']:\n",
        "   if (x>upp_wisk)or (x<low_wisk):\n",
        "      outlier.append(x)\n",
        "print(outlier)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rN54jhaAWjmD",
        "outputId": "136ade87-5437-42c7-c264-9b753d7f684e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[267.0, 349.0, 315.0, 320.0, 286.0, 312.0, 265.0, 370.0, 650.0, 290.0, 600.0, 275.0, 700.0, 495.0, 280.0, 279.0, 304.0, 330.0, 436.0, 480.0, 300.0, 376.0, 490.0, 308.0, 570.0, 380.0, 296.0, 275.0, 360.0, 405.0, 500.0, 480.0, 311.0, 480.0, 400.0, 324.0, 600.0, 275.0, 292.0, 350.0, 496.0]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ind1=data['LoanAmount']>upp_wisk\n",
        "data.loc[ind1].index"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NZXqHzKsWyoN",
        "outputId": "a54f93f8-b402-4c98-dba4-6ffa3c216a23"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Int64Index([  5,   9,  21,  34,  54,  67,  83, 126, 130, 135, 155, 161, 171,\n",
              "            177, 233, 253, 258, 260, 278, 308, 324, 325, 333, 351, 369, 372,\n",
              "            381, 391, 409, 432, 487, 506, 514, 523, 525, 536, 561, 572, 592,\n",
              "            600, 604],\n",
              "           dtype='int64')"
            ]
          },
          "metadata": {},
          "execution_count": 57
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ind2=data['LoanAmount']<low_wisk\n",
        "data.loc[ind2].index\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "a_TWVHLwW5XF",
        "outputId": "7f71f3b9-a2e7-4182-d7a2-9fa7955130d3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Int64Index([], dtype='int64')"
            ]
          },
          "metadata": {},
          "execution_count": 58
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.drop([5,   9,  21,  34,  54,  67,  83, 126, 130, 135, 155, 161, 171,\n",
        "            177, 233, 253, 258, 260, 278, 308, 324, 325, 333, 351, 369, 372,\n",
        "            381, 391, 409, 432, 487, 506, 514, 523, 525, 536, 561, 572, 592,\n",
        "            600, 604],inplace=True)\n",
        "data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 505
        },
        "id": "A7KWNWImXC4V",
        "outputId": "df04fdd5-cdde-4aaa-faf7-db54dd90404d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Loan_ID  Gender Married Dependents     Education Self_Employed  \\\n",
              "0    LP001002    Male      No          0      Graduate            No   \n",
              "1    LP001003    Male     Yes          1      Graduate            No   \n",
              "2    LP001005    Male     Yes          0      Graduate           Yes   \n",
              "3    LP001006    Male     Yes          0  Not Graduate            No   \n",
              "4    LP001008    Male      No          0      Graduate            No   \n",
              "..        ...     ...     ...        ...           ...           ...   \n",
              "609  LP002978  Female      No          0      Graduate            No   \n",
              "610  LP002979    Male     Yes         3+      Graduate            No   \n",
              "611  LP002983    Male     Yes          1      Graduate            No   \n",
              "612  LP002984    Male     Yes          2      Graduate            No   \n",
              "613  LP002990  Female      No          0      Graduate           Yes   \n",
              "\n",
              "     ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\n",
              "0               5849                0.0       128.0             360.0   \n",
              "1               4583             1508.0       128.0             360.0   \n",
              "2               3000                0.0        66.0             360.0   \n",
              "3               2583             2358.0       120.0             360.0   \n",
              "4               6000                0.0       141.0             360.0   \n",
              "..               ...                ...         ...               ...   \n",
              "609             2900                0.0        71.0             360.0   \n",
              "610             4106                0.0        40.0             180.0   \n",
              "611             8072              240.0       253.0             360.0   \n",
              "612             7583                0.0       187.0             360.0   \n",
              "613             4583                0.0       133.0             360.0   \n",
              "\n",
              "     Credit_History Property_Area Loan_Status  \n",
              "0               1.0         Urban           Y  \n",
              "1               1.0         Rural           N  \n",
              "2               1.0         Urban           Y  \n",
              "3               1.0         Urban           Y  \n",
              "4               1.0         Urban           Y  \n",
              "..              ...           ...         ...  \n",
              "609             1.0         Rural           Y  \n",
              "610             1.0         Rural           Y  \n",
              "611             1.0         Urban           Y  \n",
              "612             1.0         Urban           Y  \n",
              "613             0.0     Semiurban           N  \n",
              "\n",
              "[573 rows x 13 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0235dff9-6b69-4fd6-b216-b276af54a823\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Loan_ID</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Married</th>\n",
              "      <th>Dependents</th>\n",
              "      <th>Education</th>\n",
              "      <th>Self_Employed</th>\n",
              "      <th>ApplicantIncome</th>\n",
              "      <th>CoapplicantIncome</th>\n",
              "      <th>LoanAmount</th>\n",
              "      <th>Loan_Amount_Term</th>\n",
              "      <th>Credit_History</th>\n",
              "      <th>Property_Area</th>\n",
              "      <th>Loan_Status</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>LP001002</td>\n",
              "      <td>Male</td>\n",
              "      <td>No</td>\n",
              "      <td>0</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>5849</td>\n",
              "      <td>0.0</td>\n",
              "      <td>128.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Urban</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>LP001003</td>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>1</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>4583</td>\n",
              "      <td>1508.0</td>\n",
              "      <td>128.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Rural</td>\n",
              "      <td>N</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>LP001005</td>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>0</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>Yes</td>\n",
              "      <td>3000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>66.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Urban</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>LP001006</td>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>0</td>\n",
              "      <td>Not Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>2583</td>\n",
              "      <td>2358.0</td>\n",
              "      <td>120.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Urban</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>LP001008</td>\n",
              "      <td>Male</td>\n",
              "      <td>No</td>\n",
              "      <td>0</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>6000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>141.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Urban</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>609</th>\n",
              "      <td>LP002978</td>\n",
              "      <td>Female</td>\n",
              "      <td>No</td>\n",
              "      <td>0</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>2900</td>\n",
              "      <td>0.0</td>\n",
              "      <td>71.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Rural</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>610</th>\n",
              "      <td>LP002979</td>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>3+</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>4106</td>\n",
              "      <td>0.0</td>\n",
              "      <td>40.0</td>\n",
              "      <td>180.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Rural</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>611</th>\n",
              "      <td>LP002983</td>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>1</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>8072</td>\n",
              "      <td>240.0</td>\n",
              "      <td>253.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Urban</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>612</th>\n",
              "      <td>LP002984</td>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>2</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>7583</td>\n",
              "      <td>0.0</td>\n",
              "      <td>187.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Urban</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>613</th>\n",
              "      <td>LP002990</td>\n",
              "      <td>Female</td>\n",
              "      <td>No</td>\n",
              "      <td>0</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>Yes</td>\n",
              "      <td>4583</td>\n",
              "      <td>0.0</td>\n",
              "      <td>133.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>Semiurban</td>\n",
              "      <td>N</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>573 rows × 13 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0235dff9-6b69-4fd6-b216-b276af54a823')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-0235dff9-6b69-4fd6-b216-b276af54a823 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-0235dff9-6b69-4fd6-b216-b276af54a823');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 59
        }
      ]
    }
  ]
}